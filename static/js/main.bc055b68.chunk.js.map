{"version":3,"sources":["components/TableHeaderFilter/index.tsx","components/TableAthlete/SortedListAthlete/index.tsx","components/TableAthlete/index.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["TableHeaderOrder","TableHeaderFilter","startOrder","onToggle","children","useState","descending","order","setOrder","className","onClick","res","ascending","SortedListAthlete","athletes","formatDistanceToKm","distance","map","value","_","key","id","name","hours","split","minutes","seconds","moment","duration","parseInt","format","formatStringToTimestamp","distance_this_week","total_time","run","bike","others","can_participate","style","color","TableAthlete","currentList","setCurrentList","onOrderByName","useCallback","sorted","sort","l","r","nl","normalize","replace","toUpperCase","nr","useEffect","nl_hours","nl_minutes","nl_seconds","nr_hours","nr_minutes","nr_seconds","nl_duration","nr_duration","App","data","date_from","date_to","last_updated","datetime","locale","marginBottom","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.bc055b68.chunk.js","sourcesContent":["import React, { FunctionComponent, useState } from 'react';\n\nexport enum TableHeaderOrder {\n    ascending, descending\n}\n\ninterface TableHeaderFilterProps {\n    startOrder?: TableHeaderOrder;\n    onToggle?: (order: TableHeaderOrder) => void;\n}\n\nexport const TableHeaderFilter: FunctionComponent<TableHeaderFilterProps> = ({ startOrder, onToggle, children }) => {\n\n    const [order, setOrder] = useState<TableHeaderOrder>(startOrder ? startOrder : TableHeaderOrder.descending);\n    \n    function onSpanClick() {\n        onToggle && onToggle(order);\n        const res = order === TableHeaderOrder.ascending ? TableHeaderOrder.descending : TableHeaderOrder.ascending;\n        setOrder(res);\n    }\n\n    return (\n        <span className=\"table-header-filter\" onClick={onSpanClick}>{children} &#x25BE;</span>\n    );\n} ","import React, { FunctionComponent } from 'react';\nimport { Athlete } from '../../../models/athlete.model';\n\nimport moment from 'moment';\nimport 'moment-duration-format';\n\ninterface SortedListAthleteProps {\n    athletes: Array<Athlete>;\n}\n\nexport const SortedListAthlete: FunctionComponent<SortedListAthleteProps> = ({ athletes }) => {\n\n    function formatDistanceToKm(distance: number): string {\n        if (distance !== 0) {\n            return `${distance / 1000}`;\n        }\n        return '';\n    }\n\n    function formatStringToTimestamp(value: string): string {\n        const hours = value.split(':')[0];\n        const minutes = value.split(':')[1];\n        const seconds = value.split(':')[2];\n\n        return moment\n            .duration({\n                seconds: parseInt(seconds),\n                minutes: parseInt(minutes),\n                hours: parseInt(hours),\n            })\n            .format(\"h[h] m[m] s[s]\");\n    }\n\n    return (\n        <>\n            {athletes.map((value, _) =>\n                <tr key={value.id}>\n                    <td>{value.name}</td>\n                    <td>{formatStringToTimestamp(value.distance_this_week.total_time)}</td>\n                    <td>{formatDistanceToKm(value.distance_this_week.run)}</td>\n                    <td>{formatDistanceToKm(value.distance_this_week.bike)}</td>\n                    <td>{formatDistanceToKm(value.distance_this_week.others)}</td>\n                    <td>{value.can_participate ? <span style={{ color: 'green' }}>âœ“</span> : 'Not yet'}</td>\n                </tr>\n            )}\n        </>\n    );\n}","import { Athlete } from \"../../models/athlete.model\";\nimport React, { useState, useCallback, useEffect } from \"react\";\nimport { TableHeaderOrder, TableHeaderFilter } from \"../TableHeaderFilter\";\nimport { SortedListAthlete } from \"./SortedListAthlete\";\n\nimport moment from 'moment';\nimport 'moment-duration-format';\n\ninterface TableAthleteProps {\n    athletes: Array<Athlete>\n}\n\nexport default function TableAthlete({ athletes }: TableAthleteProps) {\n    const [currentList, setCurrentList] = useState<Array<Athlete>>(athletes);\n\n    const onOrderByName = useCallback((order: TableHeaderOrder) => {\n        const sorted = athletes.sort((l: Athlete, r: Athlete) => {\n            const nl = l.name[0].normalize('NFD').replace(/[\\u0300-\\u036f]/g, \"\").toUpperCase();\n            const nr = r.name[0].normalize('NFD').replace(/[\\u0300-\\u036f]/g, \"\").toUpperCase();\n\n            if (order === TableHeaderOrder.ascending) {\n                if (nl > nr) { return 1; }\n                if (nl < nr) { return -1; }\n            }\n\n            if (order === TableHeaderOrder.descending) {\n                if (nl < nr) { return 1; }\n                if (nl > nr) { return -1; }\n            }\n            return 0;\n        });\n        setCurrentList([...sorted]);\n    }, [athletes]);\n\n    useEffect(() => {\n        onOrderByName(TableHeaderOrder.ascending);\n    }, [onOrderByName]);\n\n    function onOrderByTotalTime(order: TableHeaderOrder): void {\n        const sorted = athletes.sort((l: Athlete, r: Athlete) => {\n            const nl = l.distance_this_week.total_time;\n            const nr = r.distance_this_week.total_time;\n\n            const nl_hours = nl.split(':')[0];\n            const nl_minutes = nl.split(':')[1];\n            const nl_seconds = nl.split(':')[2];\n\n            const nr_hours = nr.split(':')[0];\n            const nr_minutes = nr.split(':')[1];\n            const nr_seconds = nr.split(':')[2];\n\n            const nl_duration = moment\n                .duration({\n                    seconds: parseInt(nl_seconds),\n                    minutes: parseInt(nl_minutes),\n                    hours: parseInt(nl_hours),\n                });\n\n            const nr_duration = moment\n                .duration({\n                    seconds: parseInt(nr_seconds),\n                    minutes: parseInt(nr_minutes),\n                    hours: parseInt(nr_hours),\n                });\n\n            if (order === TableHeaderOrder.ascending) {\n                if (nl_duration > nr_duration) { return 1; }\n                if (nl_duration < nr_duration) { return -1; }\n            }\n\n            if (order === TableHeaderOrder.descending) {\n                if (nl_duration < nr_duration) { return 1; }\n                if (nl_duration > nr_duration) { return -1; }\n            }\n            return 0;\n        });\n        setCurrentList([...sorted]);\n    }\n\n    function onOrderByRunDistance(order: TableHeaderOrder): void {\n        const sorted = athletes.sort((l: Athlete, r: Athlete) => {\n            const nl = l.distance_this_week.run;\n            const nr = r.distance_this_week.run;\n\n            if (order === TableHeaderOrder.ascending) {\n                if (nl > nr) { return 1; }\n                if (nl < nr) { return -1; }\n            }\n\n            if (order === TableHeaderOrder.descending) {\n                if (nl < nr) { return 1; }\n                if (nl > nr) { return -1; }\n            }\n            return 0;\n        });\n        setCurrentList([...sorted]);\n    }\n\n    function onOrderByBikeDistance(order: TableHeaderOrder): void {\n        const sorted = athletes.sort((l: Athlete, r: Athlete) => {\n            const nl = l.distance_this_week.bike;\n            const nr = r.distance_this_week.bike;\n\n            if (order === TableHeaderOrder.ascending) {\n                if (nl > nr) { return 1; }\n                if (nl < nr) { return -1; }\n            }\n\n            if (order === TableHeaderOrder.descending) {\n                if (nl < nr) { return 1; }\n                if (nl > nr) { return -1; }\n            }\n            return 0;\n        });\n        setCurrentList([...sorted]);\n    }\n\n    function onOrderByOtherDistance(order: TableHeaderOrder): void {\n        const sorted = athletes.sort((l: Athlete, r: Athlete) => {\n            const nl = l.distance_this_week.others;\n            const nr = r.distance_this_week.others;\n\n            if (order === TableHeaderOrder.ascending) {\n                if (nl > nr) { return 1; }\n                if (nl < nr) { return -1; }\n            }\n\n            if (order === TableHeaderOrder.descending) {\n                if (nl < nr) { return 1; }\n                if (nl > nr) { return -1; }\n            }\n            return 0;\n        });\n        setCurrentList([...sorted]);\n    }\n\n    function onOrderByEligible(order: TableHeaderOrder): void {\n        const sorted = athletes.sort((l: Athlete, r: Athlete) => {\n            if (order === TableHeaderOrder.ascending) {\n                if (l.can_participate) { return -1; }\n                if (r.can_participate) { return 1; }\n            }\n\n            if (order === TableHeaderOrder.descending) {\n                if (l.can_participate) { return 1; }\n                if (r.can_participate) { return -1; }\n            }\n            return 0;\n        });\n        setCurrentList([...sorted]);\n    }\n\n    return (\n        <>\n            <table>\n                <thead>\n                    <tr>\n                        <th><TableHeaderFilter onToggle={onOrderByName}>Name</TableHeaderFilter></th>\n                        <th><TableHeaderFilter onToggle={onOrderByTotalTime}>Total time</TableHeaderFilter></th>\n                        <th><TableHeaderFilter onToggle={onOrderByRunDistance}>Run distance (km)</TableHeaderFilter></th>\n                        <th><TableHeaderFilter onToggle={onOrderByBikeDistance}>Bike distance (km)</TableHeaderFilter></th>\n                        <th><TableHeaderFilter onToggle={onOrderByOtherDistance}>Other distance (km)</TableHeaderFilter></th>\n                        <th><TableHeaderFilter startOrder={TableHeaderOrder.ascending} onToggle={onOrderByEligible}>Is eligible?</TableHeaderFilter></th>\n                    </tr>\n                </thead>\n                <tbody>\n                    <SortedListAthlete athletes={currentList} />\n                </tbody>\n            </table>\n        </>\n    );\n}","import React from 'react';\nimport TimeAgo from 'timeago-react';\n\nimport './App.css';\nimport data from './data/data.json';\nimport TableAthlete from './components/TableAthlete';\n\nfunction App() {\n  const { athletes, date_from, date_to, last_updated } = data;\n\n  return (\n    <div className=\"app container\">\n      <h5 className=\"header-last_updated\">Last updated: {last_updated && <TimeAgo datetime={last_updated} locale='fr_CA' />}</h5>\n      <h1 className=\"header-title\">nventive Strava Challenge</h1>\n      <blockquote>\n        <p><em>To be eligible for the weekly draw, a participant must, at least, do 3 hours and 30 min of physical activity.</em></p>\n      </blockquote>\n      <p style={{ marginBottom: '1rem' }}><b>{date_from}</b> to <b>{date_to}</b></p>\n      <div className=\"table\">\n        <TableAthlete athletes={athletes} />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}